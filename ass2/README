
/*
 * Kirby Banman
 * 1173895
 *
 * CMPUT 379 EA1
 * Assignment 2
 *
 */

TODO
====

- write getListeningSocket(serverconfig);

- write forky

- write pthready

- put mutex init code p&f in log monitor.h

- write getLogMessage(request * req, responsecode)
    - if non null free(), don't report errors for this

- grep for todo logs

- grep for printfs and remove them or swap for logs

- daemonize


General Approach
================

Both servers start identically during setup phase, and both have a similarly
structured listen loop.

For each client connection:
    - Threaded server spawns a thread.
        - no need to `join` later, so `detached` for automatic resource cleanup
    - Forked server forks a child process
        - child processes inherit socket fd, so no IPC required

Both servers handle clients with the exact same function, though the threaded
server's handler is wrapped to receive arguments in `void *` form.

Much implementation is shared between both servers:
    - server_conf
    - server_util
    - log_monitor


Client Handler
==============

1. Takes a single accepted socket and reads the sent data.
2. Attempts to validate the request format by parsing it into a struct
3. Checks if requested file exists with a stat call
4. Constructs response with pointer/length pair
    1. Checks file length with stat call
           http://stackoverflow.com/questions/8236/
           how-do-you-determine-the-size-of-a-file-in-c
    2. Attempts to read file into malloced string.
5. Constructs response string.
6. Frees response string and request struct.
7. Closes socket.


Assumptions
===========

- HTTP requests are valid if prepended by any amount of newlines
    see: http://tools.ietf.org/html/rfc2616#section-4

- HTTP responses need not be terminated by any particular sequence/flag


Q & A
=====

(for Kirby's reference - do not grade based on any content below)

- are there necessary cleanup steps for threads or processes?

- how do i daemonize within my code?
    with daemonize()

- is there a single file write sync architecture I can use for fork() and pthreads?
    yep. mutex.  note special initialization process for fork() mutexing at
        http://stackoverflow.com/questions/6847973/
        do-forked-child-processes-use-the-same-semaphore
    and in the corresponding code in
        /lab/mutex/forky.c
